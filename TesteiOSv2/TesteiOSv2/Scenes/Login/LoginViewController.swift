//
//  LoginViewController.swift
//  TesteiOSv2
//
//  Created by Brendoon Ryos on 10/01/19.
//  Copyright (c) 2019 Brendoon Ryos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
  func displayLoginErrorMessage(viewModel: Login.ViewModel)
  func displayLoginSucceeded(viewModel: Login.ViewModel)
  func displayFilledLoginTextFields(viewModel: Login.TextFieldsData.ViewModel)
}

final class LoginViewController: UIViewController {
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
  
  // MARK: IBOutlets
  
  @IBOutlet weak var usernameTextField: UITextField!
  @IBOutlet weak var passwordTextField: UITextField!
  @IBOutlet weak var loginButton: UIButton!
  @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    self.setupView()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    checkTextFields()
  }
  
  // MARK: Login
  
  @IBAction func login(_ sender: UIButton) {
    let request = Login.Request(username: usernameTextField.text!, password: passwordTextField.text!)
    interactor?.login(request: request)
    sender.setTitle("", for: .normal)
    sender.isUserInteractionEnabled = false
    activityIndicator.startAnimating()
  }
  
  private func checkTextFields() {
    if usernameTextField.text!.isEmpty || passwordTextField.text!.isEmpty {
      enableLoginButton(false)
    } else {
      enableLoginButton(true)
    }
  }
  
  private func setupView() {
    view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard)))
    interactor?.getLoginTextFieldsData(request: Login.TextFieldsData.Request())
  }
  
  @objc private func dismissKeyboard() {
    view.endEditing(true)
    if loginButton.isUserInteractionEnabled {
      checkTextFields()
    }
  }
  
  private func enableLoginButton(_ isEnabled: Bool = false) {
    let alpha: CGFloat = isEnabled ? 1 : 0.4
    loginButton.setTitle("Login", for: .normal)
    loginButton.setTitleColor(UIColor.white.withAlphaComponent(alpha), for: .normal)
    loginButton.isUserInteractionEnabled = isEnabled
  }
}

extension LoginViewController: LoginDisplayLogic {
  func displayLoginSucceeded(viewModel: Login.ViewModel) {
    router?.routeToStatements()
    activityIndicator.stopAnimating()
  }
  
  func displayLoginErrorMessage(viewModel: Login.ViewModel) {
    checkTextFields()
    activityIndicator.stopAnimating()
    let error = viewModel.error!
    alert(message: error.description.message, title: error.description.title)
  }
  
  func displayFilledLoginTextFields(viewModel: Login.TextFieldsData.ViewModel) {
    usernameTextField.text = viewModel.username
    passwordTextField.text = viewModel.password
  }
}

extension LoginViewController: UITextFieldDelegate {
  func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    if textField == usernameTextField {
      passwordTextField.becomeFirstResponder()
    } else {
      passwordTextField.resignFirstResponder()
      checkTextFields()
    }
    return true
  }
}
